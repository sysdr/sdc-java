====================================
PROMETHEUS QUICK QUERY REFERENCE
====================================

Access: http://localhost:9090

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 ESSENTIAL QUERIES TO START WITH
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. CHECK IF ALL SERVICES ARE UP
   ──────────────────────────────────────────
   up

2. HTTP REQUEST RATE (Requests per second)
   ──────────────────────────────────────────
   rate(http_server_requests_seconds_count[5m])

3. HTTP ERROR RATE (4xx & 5xx)
   ──────────────────────────────────────────
   rate(http_server_requests_seconds_count{status=~"4..|5.."}[5m])

4. MEMORY USAGE (%)
   ──────────────────────────────────────────
   100 * (jvm_memory_used_bytes{area="heap"} / jvm_memory_max_bytes{area="heap"})

5. JVM THREAD COUNT
   ──────────────────────────────────────────
   jvm_threads_live_threads

6. KAFKA MESSAGE LAG
   ──────────────────────────────────────────
   kafka_consumer_lag_sum

7. DATABASE CONNECTION POOL
   ──────────────────────────────────────────
   hikari_connections_active
   hikari_connections_idle

8. RESPONSE TIME (95th percentile in seconds)
   ──────────────────────────────────────────
   histogram_quantile(0.95, rate(http_server_requests_seconds_bucket[5m]))

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 ADVANCED MONITORING
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

9. SERVICE AVAILABILITY
   ──────────────────────────────────────────
   up{job="api-gateway"} * 100
   up{job="log-producer"} * 100
   up{job="log-consumer"} * 100

10. CPU USAGE
    ──────────────────────────────────────────
    process_cpu_usage

11. GC PAUSE TIME
    ──────────────────────────────────────────
    rate(jvm_gc_pause_seconds_sum[5m])

12. SUCCESS RATE
    ──────────────────────────────────────────
    (rate(http_server_requests_seconds_count{status!~"5.."}[5m]) / 
     rate(http_server_requests_seconds_count[5m])) * 100

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔍 QUERY BY SERVICE NAME
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Use these patterns to filter by specific services:

rate(http_server_requests_seconds_count{application="api-gateway"}[5m])
rate(http_server_requests_seconds_count{application="log-producer"}[5m])
rate(http_server_requests_seconds_count{application="log-consumer"}[5m])

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 HOW TO USE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Open: http://localhost:9090
2. Click the "Graph" tab
3. Paste any query above
4. Click "Execute"
5. Choose time range (5m, 1h, 1d, etc.)
6. View graph or table format

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📝 TIP: Start with query #1 (up) to verify all services
      are running and being monitored.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
