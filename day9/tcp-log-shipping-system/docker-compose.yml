version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - log-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - log-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: logsdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - log-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - log-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - log-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
    networks:
      - log-network

  # Application Services
  log-producer:
    build:
      context: .
      dockerfile: ./log-producer/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - log-receiver
    environment:
      - LOG_SHIPPER_HOST=log-receiver
      - LOG_SHIPPER_PORT=9090
    networks:
      - log-network

  log-receiver:
    build:
      context: .
      dockerfile: ./log-receiver/Dockerfile
    ports:
      - "8082:8082"
      - "9091:9090"
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - log-network

  log-consumer:
    build:
      context: .
      dockerfile: ./log-consumer/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres
      - redis
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/logsdb
      - SPRING_REDIS_HOST=redis
    networks:
      - log-network

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - log-network

networks:
  log-network:
    driver: bridge

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
